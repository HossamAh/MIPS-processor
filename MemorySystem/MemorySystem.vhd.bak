library ieee;
use ieee.std_logic_1164.all;
use IEEE.Numeric_Std.all;
entity MemorySystem is
  port (
    clk,rst,WR,RD:IN std_logic;
    address:IN std_logic_vector(31 downto 0);
    Datain:IN std_logic_vector(31 downto 0);
    stall:out std_logic;
    DataOut:out std_logic_vector(31 downto 0)
  ) ;
end MemorySystem ;

architecture arch of MemorySystem is
signal BusDataIN,BusDataOUT:std_logic_vector(127 downto 0);

-----------------------------------------------------Address Sections--------------------------------------
signal tag,Offset:std_logic_vector(2 downto 0);
signal index:std_logic_vector(4 downto 0);
----------------------------------------------------------------------------------------------------------
---------------------------------------------------controller Signals-------------------------------------
signal memoryReadyFromMainMemory:std_logic;
signal CacheRead,CacheWrite,Cache_Bus_Read,Cache_Bus_Write,Memory_Bus_Read,Memory_Bus_Write,hit_miss:std_logic:='0';    
----------------------------------------------------------------------------------------------------------
---------------------------------------------------Main Memory Signals-------------------------------------
signal MainMemoryAddress:std_logic_vector(10 downto 0);
signal CounterValue:std_logic_vector(1 downto 0);
signal counterReset:std_logic;-- when hit =1 then reset counter.
----------------------------------------------------------------------------------------------------------

begin
tag <= address(10 downto 8);
Offset <= address(2 downto 0);
index<= address(7 downto 3);
MainMemoryAddress<=address(10 downto 0);
counterReset<=hit_miss or rst;

DataMemoryController:entity work.controller port map(tag=>tag,index=>index,clk=>clk,rst=>rst, wr=>WR, rd=>RD,memory_ready=>memoryReadyFromMainMemory,

Cache_read=>CacheRead, Cache_write=>CacheWrite,Cache_Bus_Write=>Cache_Bus_Write
,Memory_Bus_Read=>Memory_Bus_Read,Cache_Bus_Read=>Cache_Bus_Read,Memory_Bus_Write=>Memory_Bus_Write,
hit_miss=>hit_miss,Stall=>stall);


DataMainMemory:entity work.mainmemory port map(clk=>clk,rst=>counterReset,busRead=>Memory_Bus_Read,busWrite=>Memory_Bus_Write,
address=>MainMemoryAddress,
BusDataIN=>BusDataIN,
BusDataOUT=>BusDataOUT,
counter=>CounterValue,
readySignal=>memoryReadyFromMainMemory);    

DataCache:entity work.datacache  port Map(clk=>clk,BusRead=>Cache_Bus_Read,BusWrite=>Cache_Bus_Write,
CacheRead=>CacheRead,CacheWrite=>CacheWrite,
index=>index,
Offset=>Offset,
Counter=>CounterValue,
dataIn=>Datain,
dataOut=>DataOut,
BusDataIN=>BusDataOUT,
BusDataOUT=>BusDataIN);

CounterProcess: process(clk, counterReset,CounterValue,Cache_Bus_Read,Cache_Bus_Write,Memory_Bus_Read,Memory_Bus_Write)
begin
    if(rising_edge(clk))then
        if counterReset = '1' then
            CounterValue <="00";
        elsif (Cache_Bus_Read='1' or Cache_Bus_Write='1' or Memory_Bus_Read='1' or Memory_Bus_Write='1' ) then
            CounterValue <=std_logic_vector(unsigned(counter)+1);
        end if;
    end if;
end process CounterProcess;

end architecture ; -- arch